#! /usr/bin/env perl
use strict;
use Data::Dumper;
use Time::HiRes 'gettimeofday';
use GenomeTypeObject;
use Getopt::Long::Descriptive;
use File::Copy;
use IPC::Run qw(run);
use File::SearchPath qw(searchpath);
use P3DataAPI;
use Cwd;

my $default_data_dir = $ENV{LOWVAN_DATA_DIR} // "/home/jjdavis/bin/Viral_Annotation";

my($opt, $usage) = describe_options("%c %o",
				    ["input|i=s"       => "Input file"],
				    ["output|o=s"      => "Output file"],
				    ["prefix|x=s"      => "File Prefix", { default => "Viral_Anno" }],
				    ["remove-existing" => "Remove existing CDS, mat_peptide, and RNA features if run is successful"],	
				    ["threads|t=i"     => "Limit to this many threads", { default => 8 }],
				    ["debug|d"         => "Enable debugging"],
				    ["cdir|c=s"        => "Full path to reference contigs directory", {default => "$default_data_dir/Viral-Rep-Contigs"}],
				    ["pdir|p=s"        => "Full path to the PSSM directory", {default => "$default_data_dir/Viral-PSSMs"}],
				    ["json|j=s"        => "Full path to the JSON opts file", {default => "$default_data_dir/Viral_PSSM.json"}],
				    ["max|a=i"         => "Max contig length, default is 30000", { default => 35000 }],
				    ["min|z=i"         => "Min contig length, default is 1000", { default => 300 }],
				    ["help|h"          => "Show this help message"]);


print($usage->text), exit 0 if $opt->help;
die($usage->text) if @ARGV != 0;

chomp(my $hostname = `hostname`);

my $tempdir = File::Temp->newdir(CLEANUP => ($opt->debug ? 0 : 1));
my $prefix = $opt->prefix // "Viral_Anno";

print STDERR "Tempdir=$tempdir\n" if $opt->debug;

my $here = getcwd;

my $genome_in = GenomeTypeObject->create_from_file($opt->input);
$genome_in or die "Error reading and parsing input";



#
# Invoke annotate_by_viral_pssm.pl to annotate viral genome.
#
# We parse the feature table file that is generated by annotate_by_viral_pssm.pl. It contains three feature types.
# CDS, RNA, and mat_peptide
# It returns a GTO to stdout
#

my $sequences_file = $genome_in->extract_contig_sequences_to_temp_file();
my $taxon_id       = $genome_in->{ncbi_taxonomy_id};   #I should be able to get rid of this if I don't require it in the base-script
my $name           = $genome_in->{scientific_name};        #I should also be able to get rid of this 

if (! $sequences_file){die "No sequences in the input GTO\n";}
if (! $taxon_id)      {die "No NCBI taxonomy ID in the input GTO\n";}
if (! $name)          {die "No genome name in the input GTO\n";}

my @params = ("-i",    $sequences_file,
		      "-t",    $tempdir,
		      "-p",    $prefix,
		      "-tax",  $taxon_id,
		      "-g",    $name,
		      "-threads", $opt->threads,
		      "-c",    $opt->cdir,
		      "-pssm", $opt->pdir,
		      "-j",    $opt->json,
		      "-min",  $opt->min,
		      "-max",  $opt->max,
		      "-s",
		      "-no",
		      "-tbl",
		      "-tmp");

print STDERR Dumper(\@params);
my $ok = run(["annotate_by_viral_pssm.pl", @params], ">", "$here/$prefix.stdout.txt", "2>", "$here/$prefix.stderr.txt");


if (!$ok)
{
    print STDERR "Viral Annotation run failed with rc=$?. Stdout:\n";
    copy("$here/Viral_Anno.stderr.txt", \*STDERR);
}


    
my $event = {
    tool_name => "LowVan Annotate",
    execution_time => scalar gettimeofday,
    parameters => \@params,
};

my $event_id = $genome_in->add_analysis_event($event);


## Parse the generated peptide file. We collect the CDS, mature_peptides, and RNAs then
## add features so that we can register the counts.
##

my ($close_bit, $close_id, $close_name, $close_file);
if (open(my $tbl, "<", "$here/$prefix.stdout.txt"))
{
	my %features;
	while (<$tbl>)
	{
		chomp;
		my ($local_genome_id, $name, $contig, $anno_source, $type, $local_peg_id, $symbol, $start, $stop, $strand, $len, $virus, $cf, $cb, $ci, $cn, $pssm, $anno, $dna, $aa) = split /\t/; 
		$close_file = $cf;
		$close_bit  = $cb;
		$close_id   = $ci;
		$close_name = $cn;
		
		my $feature;
		if ($type =~ /(mat_peptide)|(CDS)/)
		{
			$feature = 
			{
				type        => $type,
				contig      => $contig,
				aa_sequence => $aa,
				location    => ([[$contig, $start, $strand, $len]]),
				product     => $anno,
				pssm        => ([[$virus, $pssm, $anno, "LowVan Annotate"]]),
				symbol      => $symbol,
			}
		}
		elsif ($type =~ /RNA/)
		{
			$feature =
			{ 
				type        => $type,
				contig      => $contig,
				location    => ([[$contig, $start, $strand, $len]]),
				product     => $anno,
				symbol      => $symbol,
			}
		}		
		push(@{$features{$type}}, $feature);
	}
	
    if (%features && $opt->remove_existing)
    {
		my @to_del = $genome_in->fids_of_type('CDS', 'mat_peptide', 'RNA');
		print STDERR "Delete @to_del\n";
		$genome_in->delete_feature($_) foreach @to_del;
    }

    
    for my $type (keys %features)
    {
		my $feats = $features{$type};
		my $n = @$feats;
		my $id_type = $type;
	
		for my $feature (@$feats)
		{
			my $p = {
					-id	                 => $genome_in->new_feature_id($id_type),
					-type 	             => $type,
					-location 	         => $feature->{location},
					-analysis_event_id 	 => $event_id,
					-annotator           => 'LowVan Annotate',
					#-alias_pairs         => [[gene => $feature->{symbol}]],
					-protein_translation => $feature->{aa_sequence},
					-function            => $feature->{product},
					-family_assignments  => $feature->{pssm},
					};
			
			if (defined $feature->{symbol} && $feature->{symbol} ne '') 
			{
				$p->{-alias_pairs} = [[gene => $feature->{symbol}]];
   			}
			$genome_in->add_feature($p);
		}
    }

	#add close genome:
	#$close_genome, $close_bit, $close_id, $close_name,
	my $close = { genome_id => $close_id, genome_name => $close_name, file_name => $close_file, closeness_measure => "BLASTn bit score", closeness_value => $close_bit, analysis_method => "LowVan Annotate"};
	push(@{$genome_in->{close_genomes}}, $close);


}
else
{
    warn "Could not read $here/$prefix.stdout.txt\n";
}

$genome_in->destroy_to_file($opt->output);




